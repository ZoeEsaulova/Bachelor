<html>
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
    <!--bootstrap-->
    <link href="bootstrap-3.3.5/docs/examples/starter-template/starter-template.css" rel="stylesheet">
    <script type="text/javascript" src="bootstrap-3.3.5/docs/assets/js/ie-emulation-modes-warning.js"></script>
    <!--script type="text/javascript" src="bootstrap-filestyle-1.2.1/src/bootstrap-filestyle.min.js"></script-->
    <link href="bootstrap-3.3.5/dist/css/bootstrap.min.css" rel="stylesheet">  
    <!-- jQuery -->
    <script type="text/javascript" src="onlinefolio/layout/scripts/jquery.min.js"></script>
    <script type="text/javascript" src="onlinefolio/layout/scripts/jquery.slidepanel.setup.js"></script>

    <script type="text/javascript" src="javascripts/jquery.imgareaselect-0.9.10/scripts/jquery.min.js"></script>
    <script type="text/javascript" src="javascripts/jquery.imgareaselect-0.9.10/scripts/jquery.imgareaselect.pack.js"></script>
    <link rel="stylesheet" type="text/css" href="javascripts/jquery.imgareaselect-0.9.10/css/imgareaselect-default.css" />
    
    <!-- Open Layers 3 -->
    <link rel="stylesheet" href="http://openlayers.org/en/v3.10.1/css/ol.css" type="text/css">
    <script src="http://openlayers.org/en/v3.11.2/build/ol-debug.js" type="text/javascript"></script>
    <!-- LayerSwitcher -->
    <link rel="stylesheet" href="ol3-layerswitcher-master/src/ol3-layerswitcher.css" />
    <link rel="stylesheet" href="ol3-layerswitcher-master/examples/layerswitcher.css" />
    <script src="ol3-layerswitcher-master/src/ol3-layerswitcher.js"></script>
    <script src="ol3-layerswitcher-master/examples/layerswitcher.js"></script>
    <script src="ol3-layerswitcher-master/examples/addlayer.js"></script>

    <title>Geotagged images</title>
    <style type="text/css">
      img {
        width: 100%;
        margin-top: 50px
      }    
      #map {
        margin: 0;
        margin-top: 50px;
        z-index: 0;
      } 
      .col-lg-6 {
        margin-left: 0;
        margin-right: 0;
        padding-left: 0;
        padding-right: 0;
      }
      #hidden1 {
        right: 40px;
      }
      .form-control {
        white-space: nowrap;
      }
      .input {
        width: 70px;
        height: 35px; 
        white-space: nowrap;
        border-radius: 5px;
        position: relative;
        top: 3px;
      }
      button {
        margin: 2px;
        position: relative;
        top: 50%;
      }
      #get {
        margin-right: 1px;

      }
      #getObjects {

      }
      .well {
          background: rgba(255,0,0,0.2);
          margin: 0px;
      }
      #next {
        position: relative;
        left: 300px;
        margin-top: 5px
      }
    </style>
  </head>

  <body onload="showMarker(<%= properties %>)">
  <!-- Navigation bar -->
    <nav class="navbar navbar-inverse navbar-fixed-top">
      <div class="container">
        <div class="navbar-header">
          <a class="navbar-brand" href="/">Geotagged images</a>
        </div>
        <div id="navbar" class="collapse navbar-collapse">
          <ul class="nav navbar-nav">
            <li class="active">
              <input value="y" id="objectCoords" name="objectCoords" style="width:15" hidden>
              <input value="y" id="objectCoordsMap" name="objectCoordsMap" style="width:15" hidden>
              <input value="y" id="imageSize" name="imageSize" style="width:15" hidden>             
              <button onclick="submitObject(<%= properties %>)" hidden>Submit object</button>
            </li>
            <li>
            <form id="getObjects" action='/overpass' method='post' enctype="multipart/form-data" style="white-space: nowrap;">
              <input value="x" id="polyCoords" name="polyCoords" style="width:15" hidden>
              <button type="submit" style="white-space: nowrap;" hidden>Get Objects</button>
              </form>
              </li>
              <li>
              <button onclick="markObject()" style="white-space: nowrap;" hidden>Mark object</button>
              </li>
          </ul>
        </div><!--/.nav-collapse -->
      </div>
    </nav>

    <!-- Image and instractions -->
    <div class="container-fluid">
      <div class="row">
        <div class="col-lg-6">
          <img id="myImg" class="img-thumbnail" src=<%= imageSource %> alt="your image"/>
          <div style="padding-right: 10px; padding-left: 10px;">
          <h3 style="color: red; margin-top: 5px;">Instruction: </h3>
          <div class="well">The arror marker on the map marks the place where the photo was taken. Please rotate the map to point the arrow in the direction the camera was pointed to when the photo was taken. You can rotate the map usgin Shift + Left mouse key. You can switch between satellite and map view and zoom in/out. </div>
          <button onclick="showPolygon(<%= properties %>)" id="polygon" type="button" hidden>Show polygon</button>
          <form method="post" action="/next" enctype="multipart/form-data" id="nextForm">
          <input value="<%= nextImage %>" id="nextImage" name="nextImage" id="hidden1" hidden>
          <input value="x" id="mapRotation" name="mapRotation" hidden>
          <input value="x" id="lat" name="lat" hidden>
          <input value="x"id="lon" name="lon" hidden>
          <label>Do you know this place?&nbsp;&nbsp;</label>
          <label for="yes">Yes</label>
          <input type="radio" name="known" value="Yes" id="yes" onchange="setKnown();">
          <label for="no">No</label>
          <input type="radio" name="known" value="No" id="no" onchange="setKnown();">
          <button id="next" type="button" class="btn btn-danger" onclick="submitImage(<%= properties %>)" disabled="disabled">Next image</button>
          </form>
          </div>
        </div>
        <div class="col-lg-6">
          <div class="row">
          </div>
          <!-- Map placeholder -->
          <div class="row">
            <div class="col-lg-12">
              <div id="map" ></div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script>
      function setKnown(){
          document.getElementById("next").disabled = false;
      }

      /* display uploaded image */
      function preview(img, selection) {
        var width = img.width
        var xy = selection.x1 + " " + selection.y1 + " " + selection.x2 + " " + selection.y2
        console.log(xy)
        document.getElementById("objectCoords").value = xy;
        document.getElementById("imageSize").value = width;  
      }

      /* mark object on the image using bounding box */
      function markObject() {
          $('#myImg').imgAreaSelect({
              handles: true,
              onSelectEnd: preview
          });
      }

      /* OpenLayers 3 */
      //create satellite layer
      var sourceBingMaps = new ol.source.BingMaps({
            key: 'Ak-dzM4wZjSqTlzveKz5u0d4IQ4bRzVI309GxmkgSVr1ewS6iPSrOvOKhA-CJlm3',
            imagerySet: 'Aerial',
          });

      // create an interactions and controls
      var mouseZoom = new ol.interaction.MouseWheelZoom();
      var interaction = new ol.interaction.DragRotate({ condition: ol.events.condition.shiftKeyOnly });
      var pan = new ol.interaction.DragPan();
      var rotateControl = new ol.control.Rotate();
      var zoomControl = new ol.control.Zoom();
      var layerSwitcher = new ol.control.LayerSwitcher();

      var myView = new ol.View({
        center: ol.proj.transform([ 7.617449, 51.963416  ], 'EPSG:4326', 'EPSG:3857'),
        zoom: 15
      })
      var map = new ol.Map({
        target: 'map',
        controls: [rotateControl, zoomControl, layerSwitcher],
        layers: [
          new ol.layer.Tile({
            title: 'OSM',
            type: 'base',
            visible: true,
            source: new ol.source.OSM()
          }),
          new ol.layer.Tile({
            title: 'Satellite',
            type: 'base',
            visible: false,
            source: sourceBingMaps
          })
        ],
        view: myView,
        interactions: [interaction, mouseZoom,pan ]
      });

      /* convert radians to degrees 
            * @param rad: angle in radians
            * @return angle in degrees
      */
      function radToDegree(rad) {
        var degrees = Math.abs(rad)*(180/Math.PI)
        if (degrees > 360) { 
          degrees = degrees - (Math.floor(degrees / 360)*360) 
        } 
        if (rad<0) {
          degrees = 360 - degrees
        }
        return degrees
      }

      /* show the triangle polygon
        * @param coordsString: coordinates of the polygon nodes (left and right to the focus point)
        * @param lat: Latitude cooridnate of the origin (camera location)
        * @param lon: Longitude coordinate of the origin (camera location)
        * @param targetLat: Latitude coordinate of the focus point
        * @param targetLon: Longitude coordinate of the focus point
      */
      function findTriangle(coordsString, lat, lon, targetLat, targetLon)  {

        var imageCoords = [ Number(lon), Number(lat) ]
        var target = [ Number(targetLon), Number(targetLat) ]

        var split = coordsString.split(" ")
        left = [ parseFloat(split[1]), parseFloat(split[0]) ]
        right = [ parseFloat(split[3]), parseFloat(split[2]) ]
        var point1 = ol.proj.transform(imageCoords, 'EPSG:4326', 'EPSG:3857');
        var point2 = ol.proj.transform(left, 'EPSG:4326', 'EPSG:3857');
        var point3 = ol.proj.transform(right, 'EPSG:4326', 'EPSG:3857');
        var point4 = ol.proj.transform(imageCoords, 'EPSG:4326', 'EPSG:3857');
        var point6 = ol.proj.transform(target, 'EPSG:4326', 'EPSG:3857');
        var feature = new ol.Feature({
          geometry: new ol.geom.Polygon([[point1, point2, point3, point4]]),
        });

        var coords = coordsString + " " + lat + " " + lon
        document.getElementById('polyCoords').value = coords
        var vectorSource2 = new ol.source.Vector({
                features: [feature ]
        });
        var vectorLayer2 = new ol.layer.Vector({
                source: vectorSource2,
        });
        map.addLayer(vectorLayer2)
        /*draw line */
        var featureL = new ol.Feature({
                    geometry: new ol.geom.LineString([point6, point1])
        });
        var vectorSource3 = new ol.source.Vector({
                features: [featureL ]
        });
        var vectorLayer3 = new ol.layer.Vector({
          source: vectorSource3
        });
        map.addLayer(vectorLayer3) 
      }
          
      /* send request to the server to get polygon coordinates */
      function showPolygon(properties) {
        $.get("/showPolygon", { 
          mapRotation : map.getView().getRotation(),
          lat: properties[0],
          lon: properties[1]
        }, function(response){
          findTriangle(response.coords, response.lat, response.lon, response.targetLat, response.targetLon)          
        });
      }

      /* save current map rotation and proceed to the next image */
      function submitImage(properties) {
        document.getElementById("mapRotation").value = map.getView().getRotation()
        document.getElementById("lat").value = properties[0]
        document.getElementById("lon").value = properties[1]
        $( "#nextForm" ).submit();
      }


      function submitObject(properties) {
        $.get("/triangle", { 
          mapRotation : undefined,
          lat: properties[0],
          lon: properties[1],
          objectCoords: document.getElementById("objectCoords").value,
          imageSize: document.getElementById("imageSize").value,
          objectCoordsMap: document.getElementById("objectCoordsMap").value
        }, function(response){
          findTriangle(response.coords, response.lat, response.lon, response.targetLat, response.targetLon)          
        });
      }

      //add marker
      function showMarker(properties) {    
        if (properties) {
          var lat = properties[0]
          var lon = properties[1]
          var iconFeatures=[];
          var iconFeature = new ol.Feature({
            geometry: new ol.geom.Point(ol.proj.transform([ lon, lat ], 'EPSG:4326', 'EPSG:3857')),
            name: 'Muenster'
          });
          iconFeatures.push(iconFeature);
          var vectorSource = new ol.source.Vector({
            features: iconFeatures 
          });
          var iconStyle = new ol.style.Style({
            image: new ol.style.Icon(/** @type {olx.style.IconOptions} */ ({
              anchor: [ 0.5, 200],
              scale: 0.2,
              anchorXUnits: 'fraction',
              anchorYUnits: 'pixels',
              src: "https://cdn3.iconfinder.com/data/icons/musthave/256/Stock%20Index%20Up.png"
            }))
          });
          var vectorLayer = new ol.layer.Vector({
            source: vectorSource,
            style: iconStyle
          });
          var newView = new ol.View({
                center: ol.proj.transform([ lon, lat ], 'EPSG:4326', 'EPSG:3857'),
                zoom: 15
              })
          map.addLayer(vectorLayer)
          map.setView(newView)
        }
      }
      

    </script>
  </body>
</html>