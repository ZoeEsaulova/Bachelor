<html>
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
 
    <!-- jQuery -->
    <script type="text/javascript" src="onlinefolio/layout/scripts/jquery.min.js"></script>
    <script type="text/javascript" src="onlinefolio/layout/scripts/jquery.slidepanel.setup.js"></script>

    <!--script type="text/javascript" src="javascripts/jquery.imgareaselect-0.9.10/scripts/jquery.min.js"></script-->
    <script type="text/javascript" src="javascripts/jquery.imgareaselect-0.9.10/scripts/jquery.imgareaselect.pack.js"></script>
    <link rel="stylesheet" type="text/css" href="javascripts/jquery.imgareaselect-0.9.10/css/imgareaselect-default.css" />
    <!--bootstrap-->
    <script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
    <!--script type="text/javascript" src="bootstrap-3.3.5/docs/assets/js/ie-emulation-modes-warning.js"></script>
    <script type="text/javascript" href="bootstrap-3.3.5/dist/js/bootstrap.min.js"></script>
    <script type="text/javascript" href="bootstrap-3.3.5/dist/js/bootstrap.js"></script-->
    <link href="bootstrap-3.3.5/docs/examples/starter-template/starter-template.css" rel="stylesheet">
    <link href="bootstrap-3.3.5/dist/css/bootstrap.min.css" rel="stylesheet">     
    
    <!-- Open Layers 3 -->
    <link rel="stylesheet" href="http://openlayers.org/en/v3.10.1/css/ol.css" type="text/css">
    <script src="http://openlayers.org/en/v3.11.2/build/ol-debug.js" type="text/javascript"></script>
    <!-- LayerSwitcher -->
    <link rel="stylesheet" href="ol3-layerswitcher-master/src/ol3-layerswitcher.css" />
    <link rel="stylesheet" href="ol3-layerswitcher-master/examples/layerswitcher.css" />
    <script src="ol3-layerswitcher-master/src/ol3-layerswitcher.js"></script>
    <script src="ol3-layerswitcher-master/examples/layerswitcher.js"></script>
    <script src="ol3-layerswitcher-master/examples/addlayer.js"></script>

    <title>Geotagged images</title>
    <style type="text/css">
      img {
        width: 100%;
        margin-top: 50px
      }    
      #map {
        margin: 0;
        margin-top: 50px;
        z-index: 0;
      } 
      .col-lg-6 {
        margin-left: 0;
        margin-right: 0;
        padding-left: 0;
        padding-right: 0;
      }
      #hidden1 {
        right: 40px;
      }
      form, table {
        display:inline;
        margin:0px;
        padding:0px;
      }
      .form-control {
        white-space: nowrap;
      }
      .input {
        width: 70px;
        height: 35px; 
        white-space: nowrap;
        border-radius: 5px;
        position: relative;
        top: 3px;

      }
      button {
        margin: 2px;
        position: relative;
        top: 50%;
      }
      #get {
        margin-right: 1px;

      }
      #getObjects {

      }
      ul {
        
      }

    </style>
    
  </head>

  <% if (building) { %>
       <body onload="showBuildings('<%= buildingCoords %>','<%= properties %>', '<%= arrow %>', '<%= rotation %>')">
  <% } else { %>
       <body onload="showMarker(<%= properties %>, 'point', '0')">
  <% }%>

          <!-- Modal -->
      <div class="modal fade" id="modalCameraRotation" role="dialog">
        <div class="modal-dialog">
        
          <!-- Modal content-->
          <div class="modal-content">
            <div class="modal-header">
              <button type="button" class="close" data-dismiss="modal">&times;</button>
              <h4 class="modal-title">How to define a camera rotation?</h4>
            </div>
            <div class="modal-body">
              <p>Use Shift + left mouse key to rotate the map so that the arrow shows to the direction the camera was pointed to as the foto was taken</p>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-default" data-dismiss="modal">Got it</button>
            </div>
          </div>
          
        </div>
      </div>
      <nav class="navbar navbar-inverse navbar-fixed-top">
      <div class="container">
        <div class="navbar-header">
          <a class="navbar-brand" href="/">Geotagged images</a>
        </div>
        <div id="navbar" class="collapse navbar-collapse">
          <ul class="nav navbar-nav">
            <li class="active">
              
              <input value="253 120 413 250" id="objectCoords" name="objectCoords" style="width:30" hidden>
              <input value="y" id="objectCoordsMap" name="objectCoordsMap" style="width:30" hidden>
              <input value="666" id="imageSize" name="imageSize" style="width:30" hidden>
              <button onclick="submitObject(<%= properties %>)" class="btn btn-danger">Submit</button>

            </li>
            <li><button onclick="toggleMarker(<%= properties %>, 'arrow')" class="btn btn-info">Define camera rotation</button></li>
            <li>
            <button id="openModal1" data-toggle="modal" data-target="#modalCameraRotation" hidden>openModal1</button></li>
            <li><button onclick="showPolygon(<%= properties %>)" class="btn btn-info">Show polygon</button></li>
            <li><button id="bOnImage"onclick="submitForm()" class="btn btn-info" disabled>Buildings on image</button></li>
            <li>
            <form id="getObjects" action='/overpass' method='post' enctype="multipart/form-data" style="white-space: nowrap;">
              <input value="x" id="polyCoords" name="polyCoords" style="width:15" hidden>
              <input value=<%= properties %> id="properties" name="properties" style="width:15" hidden>
              <input value=<%= imagePath %> id="imagePath" name="imagePath" style="width:15" hidden>
              <input value="x" id="mapRotation" name="mapRotation" style="width:30" hidden>
              <input value="x" id="arrow" name="arrow" style="width:30" hidden>
              <button onclick="submitForm()" style="white-space: nowrap;" class="btn btn-info" id="get">Mark buildings</button>
     
              <input value="<%= radius %>" id="radius" name="radius" class="input">
    
              </form>
              </li>
              <% if (building) { %>
                <li><button onclick="toggleBuildings()" class="btn btn-info">Show/Hide buildings</button></li>
              <% }  %>            
          </ul>
        </div>
      </div>
    </nav>

    <div class="container-fluid">
    <!-- Image -->
      <div class="row">
        <div class="col-lg-6">
          <img id="myImg" class="img-thumbnail" src=<%= imagePath %> />
          <div style="padding-right: 10px; padding-left: 10px; white-space: nowrap;">
          <h3 >Heading: </h3>
          <div class="well">Some text</div>
          </div>
        </div>
        <div class="col-lg-6">
          <div class="row">
          </div>
          <!-- Map placeholder -->
          <div class="row">
            <div class="col-lg-12">
              <div id="map" ></div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script>   
      
      //Global variables
      var buildingsSeen = false
      var marker = false
      var arrow = false
      var vectorLayer
      var vectorLayer4
      var vectorLayer5
      var vectorSource2
      var vectorLayer2
      var vectorSource3
      var vectorLayer3
      var modalCameraRotation = true
      // TBD: get coordinates of click
      function submitForm() {
        document.getElementById("mapRotation").value = map.getView().getRotation();
        jQuery("#getObjects").submit()
      }

      // display uploaded image
      function preview(img, selection) {
        var width = img.width
        var xy = selection.x1 + " " + selection.y1 + " " + selection.x2 + " " + selection.y2
        document.getElementById("objectCoords").value = xy;
        document.getElementById("imageSize").value = width;       
      }

      // mark an object on image using bounding box
      function markObject() {
          document.getElementById("objectCoords").value = "253 120 413 250"
          jQuery.noConflict();
          jQuery('#myImg').imgAreaSelect({
              x1: 253, y1: 120, x2: 413, y2: 250, 
              handles: true,
              onSelectEnd: preview
          });
      }

      /* Openlayers 3 */
      //create satellite layer
      var sourceBingMaps = new ol.source.BingMaps({
            key: 'Ak-dzM4wZjSqTlzveKz5u0d4IQ4bRzVI309GxmkgSVr1ewS6iPSrOvOKhA-CJlm3',
            imagerySet: 'Aerial',
          });
      // create an interaction to add to the map that isn't there by default
      var mouseZoom = new ol.interaction.MouseWheelZoom();
      var interaction = new ol.interaction.DragRotate({ condition: ol.events.condition.shiftKeyOnly });
      var pan = new ol.interaction.DragPan();

      var rotateControl = new ol.control.Rotate();
      var zoomControl = new ol.control.Zoom();
      var layerSwitcher = new ol.control.LayerSwitcher();
      
      var myView = new ol.View({
        center: ol.proj.transform([ 7.617449, 51.963416  ], 'EPSG:4326', 'EPSG:3857'),
        zoom: 17
      })
      var map = new ol.Map({
        target: 'map',
        controls: [zoomControl, layerSwitcher, rotateControl],
        layers: [
          new ol.layer.Tile({
            title: 'OSM',
            type: 'base',
            visible: true,
            source: new ol.source.OSM()
          }),
          new ol.layer.Tile({
            title: 'Satellite',
            type: 'base',
            visible: false,
            source: sourceBingMaps
          })
        ],
        view: myView,
        interactions: [interaction, mouseZoom,pan ]
      });

      
      /* convert radians to degrees 
                * @param rad: angle in radians
                * @return angle in degrees
      */
      function radToDegree(rad) {
        var degrees = Math.abs(rad)*(180/Math.PI)
        if (degrees > 360) { 
          degrees = degrees - (Math.floor(degrees / 360)*360) 
        } 
        if (rad<0) {
          degrees = 360 - degrees
        }
        return degrees
      }

      /* show the triangle polygon
        * @param coordsString: coordinates of the polygon nodes (left and right to the focus point)
        * @param lat: Latitude cooridnate of the origin (camera location)
        * @param lon: Longitude coordinate of the origin (camera location)
        * @param targetLat: Latitude coordinate of the focus point
        * @param targetLon: Longitude coordinate of the focus point
      */
      function findTriangle(coordsString, lat, lon, targetLat, targetLon)  {
        if (vectorLayer2) {
          map.removeLayer(vectorLayer2)
          map.removeLayer(vectorLayer3)
          map.render()
        }
        var imageCoords = [ Number(lon), Number(lat) ]
        var target = [ Number(targetLon), Number(targetLat) ]

        var split = coordsString.split(" ")
        left = [ parseFloat(split[1]), parseFloat(split[0]) ]
        right = [ parseFloat(split[3]), parseFloat(split[2]) ]
        var point1 = ol.proj.transform(imageCoords, 'EPSG:4326', 'EPSG:3857');
        var point2 = ol.proj.transform(left, 'EPSG:4326', 'EPSG:3857');
        var point3 = ol.proj.transform(right, 'EPSG:4326', 'EPSG:3857');
        var point4 = ol.proj.transform(imageCoords, 'EPSG:4326', 'EPSG:3857');
        var point6 = ol.proj.transform(target, 'EPSG:4326', 'EPSG:3857');

        var feature = new ol.Feature({
          geometry: new ol.geom.Polygon([[point1, point2, point3, point4]]),
        });

        var coords = coordsString + " " + lat + " " + lon
        document.getElementById('polyCoords').value = coords

        vectorSource2 = new ol.source.Vector({
                features: [ feature ]
        });
        vectorLayer2 = new ol.layer.Vector({
                source: vectorSource2,
        });
        map.addLayer(vectorLayer2)
        /*draw line */
        var featureL = new ol.Feature({
                    geometry: new ol.geom.LineString([point6, point1])
        });
        vectorSource3 = new ol.source.Vector({
                features: [featureL ]
        });
        vectorLayer3 = new ol.layer.Vector({
          source: vectorSource3
        });
        map.addLayer(vectorLayer3) 
        jQuery('#bOnImage').removeAttr('disabled');
      }
          
      /* send request to the server to get polygon coordinates */
      function showPolygon(properties) {
  
        jQuery.get("/showPolygon", { 
          mapRotation : map.getView().getRotation(),
          lat: properties[0],
          lon: properties[1]
        }, function(response){
          findTriangle(response.coords, response.lat, response.lon, response.targetLat, response.targetLon)          
        });
      }

      /* save current map rotation and proceed to the next image */
      function submitImage(properties) {
        document.getElementById("mapRotation").value = map.getView().getRotation()
        document.getElementById("lat").value = properties[0]
        document.getElementById("lon").value = properties[1]
        jQuery( "#nextForm" ).submit();
      }


      function defineCenter(bb) {
  
        var p1 = ol.proj.transform([ Number(bb[1]), Number(bb[0])], 'EPSG:3857', 'EPSG:4326')
        var p2 = ol.proj.transform([ Number(bb[3]), Number(bb[2])], 'EPSG:3857', 'EPSG:4326')    

        var x = (Number(bb[0])+Number(bb[2]))/2
        var y = (Number(bb[1])+Number(bb[3]))/2 
        var temp = ol.proj.transform([x, y], 'EPSG:3857', 'EPSG:4326')
        var test1 = ol.proj.transform([ 7.566651, 51.965695 ], 'EPSG:4326', 'EPSG:3857')
        var test2 = ol.proj.transform([ 842315.7363304143,6793925.045580625 ], 'EPSG:3857', 'EPSG:4326')  
        /*
        var x = (Number(bb[0])+Number(bb[2]))/2
        var y = (Number(bb[1])+Number(bb[3]))/2*/
        var center = [ { x: temp[0], y: temp[1] } ]
        center = JSON.stringify(center)
        return center
      }

      function defineCenterMultiple(buildings) {
        /*
        var lat3 = 0
        var lon3 = 0
        for (i in buildings) {
          lat3 = lat3 
        }*/
      }

      function submitObject(properties) {
        var select = map.getInteractions().getArray()[3] 
        var features = select.getFeatures();
        var feature = features.item(0);
        document.getElementById("objectCoordsMap").value = defineCenter(feature.getGeometry().getExtent())
        var selectedBuildings = [ { 
              id:  feature.getProperties().name,
              geometry: feature.getGeometry().getCoordinates() 
            }]
        if (features.getLength()>1) {
          selectedBuildings = []
          var l = features.getLength()
          var xx = 0
          var yy = 0
          for (i=0; i<l; i++) {
            selectedBuildings.push({ 
              id:  features.item(i).getProperties().name,
              geometry: features.item(i).getGeometry().getCoordinates() 
            })
            var c = defineCenter(features.item(i).getGeometry().getExtent())
            c = JSON.parse(c)
            xx = xx + c[0].x
            yy = yy + c[0].y
          } 
          xx = xx/l
          yy = yy/l
          var center = JSON.stringify( [ { x: xx, y: yy } ] )
          document.getElementById("objectCoordsMap").value = center
        }
        
        jQuery.get("/showPolygon", { 
          mapRotation : map.getView().getRotation(),
          lat: properties[0],
          lon: properties[1],
          objectCoords: document.getElementById("objectCoords").value,
          imageSize: document.getElementById("imageSize").value,
          objectCoordsMap: document.getElementById("objectCoordsMap").value,
          selectedBuildings: JSON.stringify(selectedBuildings)

        }, function(response){
          findTriangle(response.coords, response.lat, response.lon, response.targetLat, response.targetLon)          
        });
      }

      //add marker
      function showMarker(properties1, icon, rotation) {   
          
          if (typeof(properties1)=="string") {
            var splitProp = properties1.split(",")
            var lat = Number(splitProp[0].slice(2, splitProp[0].length))
            var lon = Number(splitProp[1].slice(0, splitProp[0].length-1))
            var properties = [lat,lon]
          } else {
            var properties = properties1
          }
          
          if (icon=="arrow" && vectorLayer!=undefined) {
            document.getElementById("arrow").value = "showArrow"
            marker = true
            arrow = true
            var source = "https://cdn3.iconfinder.com/data/icons/musthave/256/Stock%20Index%20Up.png"
            var iconStyle = new ol.style.Style({
              image: new ol.style.Icon(/** @type {olx.style.IconOptions} */ ({
                anchor: [ 0.5, 200],
                scale: 0.2,
                anchorXUnits: 'fraction',
                anchorYUnits: 'pixels',
                src: source
              }))
            });
            vectorLayer.setStyle(iconStyle)
            map.render()
          } else if (icon=="arrow") {
            document.getElementById("arrow").value = "showArrow"
            marker = true
            arrow = true
            var source = "https://cdn3.iconfinder.com/data/icons/musthave/256/Stock%20Index%20Up.png"
            marker = true 
          if (properties) {
            var lat = properties[0]
            var lon = properties[1]
            var iconFeatures=[];
            var iconFeature = new ol.Feature({
              geometry: new ol.geom.Point(ol.proj.transform([ lon, lat ], 'EPSG:4326', 'EPSG:3857')),
            });
            iconFeatures.push(iconFeature);
            var vectorSource = new ol.source.Vector({
              features: iconFeatures 
            });
            var iconStyle = new ol.style.Style({
              image: new ol.style.Icon(/** @type {olx.style.IconOptions} */ ({
                anchor: [ 0.5, 200],
                scale: 0.2,
                anchorXUnits: 'fraction',
                anchorYUnits: 'pixels',
                src: source
              }))
            });
            vectorLayer = new ol.layer.Vector({
              source: vectorSource,
              style: iconStyle
            });
            var newView = new ol.View({
                  center: ol.proj.transform([ lon, lat ], 'EPSG:4326', 'EPSG:3857'),
                  zoom: 17,
                  rotation: Number(rotation)
            })
            map.addLayer(vectorLayer)
            map.setView(newView)
          }
          } 

            else {
            var source = "http://i1230.photobucket.com/albums/ee488/PerfectlyDarkTails/Map-Marker-Flag-2-Right-Red-icon_zps4cea0902.png"
            marker = true 
          if (properties) {
            var lat = properties[0]
            var lon = properties[1]
            var iconFeatures=[];
            var iconFeature = new ol.Feature({
              geometry: new ol.geom.Point(ol.proj.transform([ lon, lat ], 'EPSG:4326', 'EPSG:3857')),
              name: 'Muenster'
            });
            iconFeatures.push(iconFeature);
            var vectorSource = new ol.source.Vector({
              features: iconFeatures 
            });
            var iconStyle = new ol.style.Style({
              image: new ol.style.Icon(/** @type {olx.style.IconOptions} */ ({
                anchor: [ 0.5, 200],
                scale: 0.2,
                anchorXUnits: 'fraction',
                anchorYUnits: 'pixels',
                src: source
              }))
            });
            vectorLayer = new ol.layer.Vector({
              source: vectorSource,
              style: iconStyle
            });
            var newView = new ol.View({
                  center: ol.proj.transform([ lon, lat ], 'EPSG:4326', 'EPSG:3857'),
                  zoom: 17,
                  rotation: Number(rotation)
            })
            map.addLayer(vectorLayer)
            map.setView(newView)
          }
          }   
      }

      function toggleBuildings() {
        if (buildingsSeen==true) {
          /*map.removeLayer(vectorLayer4)
          map.render()*/
          vectorLayer4.setVisible(false)
          buildingsSeen=false
        } else {
          vectorLayer4.setVisible(true)
          buildingsSeen=true
        }
      }

      function toggleMarker(properties) {
        
        if (modalCameraRotation) {
          jQuery.noConflict();
          //jQuery("#openModal1").click()
          jQuery("#modalCameraRotation").modal("show");
        }
        modalCameraRotation = false
        if (vectorLayer==undefined) {
          showMarker(properties, "arrow")
        } else if (marker==true && arrow==false) {
          /*map.removeLayer(vectorLayer4)
          map.render()*/
          showMarker(properties, "arrow")
        } else if (marker==true && arrow==true) {
          vectorLayer.setVisible(false)
          marker=false
        } else if (marker==false) {
          vectorLayer.setVisible(true)
          marker=true
        }
      }
      /* display building which can be seen on image 
      * @param building: coordinates of all buildings' nodes
      * @param properties: coordinates of the map center
      */
      function showBuildings(buildings, properties, arrow, rotation) {
        console.log(Number(rotation))
        buildingsSeen = true
        var features = []

        var buildingsArray = JSON.parse(buildings)
        
        for (id in buildingsArray) {
          var buildingCoords = buildingsArray[id].geometry
          var split = buildingCoords.split(":")
          var points = []
          for (node in split) {
            var subsplit = split[node].split(" ")
            var pointCoords = [ parseFloat(subsplit[1]), parseFloat(subsplit[0]) ]
            points.push(ol.proj.transform(pointCoords, 'EPSG:4326', 'EPSG:3857'))
          }
          points.pop()

          var feature = new ol.Feature({
            name: buildingsArray[id].id,
            geometry: new ol.geom.Polygon([points])
          });
          features.push(feature)
        }

        var splitProp = properties.split(",")
        var lat = Number(splitProp[0].slice(1, splitProp[0].length+1))
        var lon = Number(splitProp[1].slice(0, splitProp[0].length))

        var vectorSource4 = new ol.source.Vector({
                features: features
        });
        var myStyle = new ol.style.Style({
          stroke: new ol.style.Stroke({
            color: 'orange',
            width: 3
          }),
          fill: new ol.style.Fill({
            color: 'rgba(255, 153, 0, 0.5)'
          })
        })
        vectorLayer4 = new ol.layer.Vector({
                source: vectorSource4,
                style: myStyle
        });
  
        var newView2 = new ol.View({
            center: ol.proj.transform([ lon, lat ], 'EPSG:4326', 'EPSG:3857'),
            zoom: 17,
            rotation: Number(rotation)
          })

        map.addLayer(vectorLayer4)
        map.setView(newView2)  
        markObjects()    
        if (arrow=="show") {
          showMarker(JSON.stringify(properties), "arrow", rotation)
        }
      }

      function markObjects() {
        var mySelectInteraction = new ol.interaction.Select()
        mySelectInteraction.getFeatures().on('add', function(e) {
          if (e.target.getArray().length==1) {
            markObject(); 
          } else {
            jQuery.noConflict();
            jQuery('#myImg').imgAreaSelect({remove:true});
          }
          var feature = e.element // Do something with the feature
          var coordinates = feature.getGeometry().getCoordinates()
        });

        mySelectInteraction.getFeatures().on('remove', function(e) {
          if (e.target.getArray().length==1) {
            markObject(); 
          } if (e.target.getArray().length==0) {
            jQuery.noConflict();
            jQuery('#myImg').imgAreaSelect({remove:true}); 
          }
          var feature = e.element // Do something with the feature
          var coordinates = feature.getGeometry().getCoordinates()
         // console.log("Feature: " + e.target.getArray().length)         
        });
        map.addInteraction(mySelectInteraction) 
      }
      
    </script>
  </body>
</html>