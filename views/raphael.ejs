<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
  <!-- jQuery -->
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.3/jquery-ui.min.js" type="text/javascript"></script>
    <script src="raphael.min.js"></script>
    <style>
      .wrapper { position: relative; }
      .arrow {
       position: absolute;
       height: 100px;
       width: 250px;
       top: 160px;
       left: 100px;
       /*-ms-transform: rotate(90deg); /* IE 9 */
        /*-webkit-transform: rotate(90deg); /* Chrome, Safari, Opera */
        transform: rotate(45deg);
      }
    </style>
  </head>
  <body>
    <div class="discussion">
    This demo utilizes some of the path funtionality in Raphael to create a slider that follows a
    non-linear path.  The demo makes use of the getPointAtLength() function to find a point on the path
    relative to the current drag position.  Click one of the buttons to change the shape the slider know
    will be attached to and then drag the knob to see how it works.
    </div>
    <br/>

    <div class="actions">
     <button id="circle">Circle</button>
    </div>

    <div class="wrapper">
    </div>
     <div class="arrow">
      <img class="arrow" src="http://www.pd4pic.com/images/black-thin-left-arrow-arrows-links-link.png" />
      </div>
    <script>
      var pdefs = {
            circle: {
                path: Raphael._getPath.circle({attrs:{cx:300,cy:300,r:200}}),
                transform: 'r90'
              }
           },
          useDef = 'circle';
      function run()
      {
         var paper = Raphael( $('.wrapper')[0], 600, 600 ),
             path = paper.path( Raphael.transformPath(pdefs[useDef].path, pdefs[useDef].transform) )
                         .attr( 'stroke-width', 10 )
                         .attr( 'stroke', 'rgb(80,80,80)' ),
             knob = paper.ellipse( 0, 0, 15, 15 )
                         .attr( 'fill', 'lime' )
                         .attr( 'stroke', 'rgba(80,80,80,0.5)' ),
             $shim = $('<div>')
                          .css( {position: 'absolute', width: 50, height: 50 } )
                          .appendTo( $('.wrapper') ),
             len = path.getTotalLength(),
             bb = path.getBBox(),
             mid = {x: bb.x+bb.width/2, y: bb.y+bb.height/2},
             pal = path.getPointAtLength(0);
         knob.translate(pal.x,pal.y).rotate(pal.alpha);
         $shim.css({ left: pal.x-25, top: pal.y-25 });
         var angle = 0
         $shim.draggable({
               drag: function ( e, ui ) {
                  // Find lines and then angle to determine
                  // percentage around an imaginary circle.
                  var t = ( Raphael.angle( ui.position.left+25, ui.position.top+25, mid.x, mid.y ) ) / 360;
                  angle = t
                  // Using t, find a point along the path
                  pal = path.getPointAtLength( (t * len) % len );
                  // Move the knob to the new point
                  knob.transform( 't' + [pal.x, pal.y] + 'r' + pal.alpha );
               },
               stop: function ( e, ui ) {
                console.log("t: " + angle)
                  $shim.css({ left: pal.x-25, top: pal.y-25 });
               }
            });
      }
      $(function()
      {
         
                  $('.wrapper').html('');
                  useDef = "circle"
                  run();
               
      });
    </script>
  </body>
</html>